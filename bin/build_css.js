#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

//Sassファイルのディレクトリ
let srcDir = process.cwd();

/**
 * ターゲットディレクトリの設定およびチェック
 */
if (process.env.SOURCE_SCSS_DIR || process.env.SOURCE_SASS_DIR) {
  const realPath = path.resolve(process.cwd(), process.env.SOURCE_SCSS_DIR || process.env.SOURCE_SASS_DIR);
  if (!realPath.startsWith(process.cwd())) {
    //作業ディレクトリ以下のディレクトリではなかった場合はエラー扱いで終了
    throw new Exception('対象ディレクトリの指定が不正です');
  }
  srcDir = realPath;
}

//インデックスファイル名
const indexFileName = process.env.SCSS_INDEX_FILE_NAME || '_index.scss';
//抽出対象ファイルの拡張子
let fileExtensions = ['scss', 'sass'];
if (process.env.SCSS_FILE_EXTENSIONS) {
  fileExtensions = process.env.SCSS_FILE_EXTENSIONS.toLowerCase().split(',');
}
//抽出対象のファイル名パターン(接頭語)
const includePrefix = process.env.SCSS_INCLUDE_PREFIX || '_';
//抽出除外対象のファイル名パターン(接尾語)
const excludeSuffix = process.env.SCSS_EXCLUDE_SUFFIX || '-bk';
//メイン出力ファイル名
const mainFileName = process.env.SCSS_MAIN_FILE;
//CSS出力先ディレクトリ
const destDir = process.env.SCSS_INCLUDE_PREFIX;

/**
 * 正規表現文字をクオートする
 *
 * @param {String} str 正規表現文字列
 * @return {String}
 */
function regexpQuote(regexpStr) {
  const metaChars = ['$', '^', '*', '\\', '/', '.', '[', ']', '|', '?', '+', '{', '}', '(', ')'];
  const escapedChars = metaChars.map((char) => '\\' + char).join('');
  return regexpStr.replace(new RegExp('[' + escapedChars + ']', 'g'), '\\$&');
}

/**
 * 生成するインデックスファイルの情報
 */
const generateIndexFiles = {};

/**
 * インデックスファイルの生成処理
 *
 * @param {string} scanTargetDir 対象ディレクトリ
 * @param {Object} findFileOption 抽出条件
 * @returns {Array}
 */
function scanDir(scanTargetDir, findFileOption = {}) {
  const includePrefix = findFileOption.includePrefix || '_';
  const excludeSuffix = findFileOption.excludeSuffix || '-bk';
  const indexName = findFileOption.indexName || '_index.scss';
  let allowExts = findFileOption.allowExts || ['scss', 'sass'];
  allowExts = allowExts.map((ext) => ext.toLowerCase());

  //インデックスファイルのパス
  const indexPath = path.join(scanTargetDir, indexName);
  if (!generateIndexFiles[indexPath]) {
    generateIndexFiles[indexPath] = [];
  }
  //対象ディレクトリのファイルの一覧を抽出
  const allItems = fs.readdirSync(scanTargetDir);
  allItems.forEach(item => {
    const fullPath = path.join(scanTargetDir, item);
    if (fs.statSync(fullPath).isDirectory()) {
      scanDir(fullPath, findFileOption);
      const childDirIndexPath = fullPath + path.sep + indexName;
      const childDirIndexName = item + path.sep + indexName;
      if (
        generateIndexFiles[childDirIndexPath].length > 0
        &&
        !generateIndexFiles[indexPath].includes(childDirIndexName)
      ) {
        generateIndexFiles[indexPath].push(childDirIndexName);
      }
    } else if (fs.statSync(fullPath).isFile()) {
      const fileName = path.basename(item, path.extname(item));
      const fileExt = path.extname(item).toLowerCase().slice(1);
      const includeRegExp = new RegExp('^' + regexpQuote(includePrefix));
      const excludeRegExp = new RegExp(regexpQuote(excludeSuffix) + '$');
      if (
        //インデックファイルではない
        path.basename(item) !== indexName
        &&
        //ファイルの拡張子が抽出対象の拡張子に一致する
        allowExts.includes(fileExt)
        &&
        //ファイル名が抽出対象パターンに一致する
        fileName.match(includeRegExp)
        &&
        //ファイル名が抽出除外対象パターンに一致しない
        !fileName.match(excludeRegExp)
      ) {
        generateIndexFiles[indexPath].push(item)
      }
    }
  });
}
/**
 * インデックスアイルの生成処理
 *
 * @param {String} indexFilePath
 * @param {Array} forwardFiles
 */
function generateIndex(indexFilePath, forwardFiles = []) {
  const indexFileContents = forwardFiles.map(item => {
    return '@forward "' + item + '";';
  });
  indexFileContents.unshift('// ===============================');
  indexFileContents.unshift('// Auto generated by ' + path.basename(__filename));
  indexFileContents.unshift('// Do not edit this file!');
  indexFileContents.unshift('// ===============================');
  fs.writeFileSync(indexFilePath, indexFileContents.join("\n"));
}

/**
 * 対象ディレクトリの再起スキャンし、
 * 生成するインデックスファイルの情報を生成
 */
//インデックスファイル生成オプション
findFileOption = {
  'indexName': indexFileName,
  'allowExts': fileExtensions,
  'includePrefix': includePrefix,
  'excludeSuffix': excludeSuffix
}
scanDir(srcDir, findFileOption);

/**
 * メインファイルに記載する内容を専用の変数に格納し、
 * ルートディレクトリ直下のインデックスファイルのエントリーを削除
 */
const mainFileEntries = generateIndexFiles[path.join(srcDir, indexFileName)]
delete generateIndexFiles[path.join(srcDir, indexFileName)];

/**
 * 各ディレクトリにインデックスファイルを生成、
 * または、不要なインデックスファイルの削除
 */
Object.keys(generateIndexFiles).forEach((indexFilePath) => {
  if (generateIndexFiles[indexFilePath].length > 0) {
    //インデックスファイルの生成
    generateIndex(indexFilePath, generateIndexFiles[indexFilePath]);
  } else {
    if (fs.existsSync(indexFilePath)) {
      fs.unlinkSync(indexFilePath);
    }
    delete generateIndexFiles[indexFilePath];
  }
});
//メインファイルを生成
if (mainFileName && mainFileEntries.length > 0) {
  generateIndex(path.join(srcDir, mainFileName), mainFileEntries);
}
/**
 * @todo Sassファイルのコンパイル処理
 */
